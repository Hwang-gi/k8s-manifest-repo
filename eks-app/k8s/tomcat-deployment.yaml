apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-prd-tommain
  namespace: k8s-backend
  labels:
    app: main-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: main-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: main-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - main-app
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "ScheduleAnyway"
          labelSelector:
            matchLabels:
              app: main-app
      containers:
        - image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-main:latest
          name: k8s-tommain
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /main.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /main.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - name: pv-k8smain
              mountPath: /data/main
      volumes:
        - name: pv-k8smain
          persistentVolumeClaim:
            claimName: pvc-k8smain
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-prd-tomindex
  namespace: k8s-backend
  labels:
    app: index-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: index-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: index-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - index-app
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "ScheduleAnyway"
          labelSelector:
            matchLabels:
              app: index-app
      containers:
        - image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-index:latest
          name: k8s-tomindex
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /index.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /index.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - name: pv-k8sindex
              mountPath: /data/index
      volumes:
        - name: pv-k8sindex
          persistentVolumeClaim:
            claimName: pvc-k8sindex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-prd-tomsignup
  namespace: k8s-backend
  labels:
    app: signup-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: signup-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: signup-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - signup-app
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app: signup-app
      containers:
        - image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-signup:latest
          name: k8s-tomsignup
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /signup.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /signup.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - name: pv-k8ssignup
              mountPath: /data/signup
      volumes:
        - name: pv-k8ssignup
          persistentVolumeClaim:
            claimName: pvc-k8ssignup

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-prd-tomlogin
  namespace: k8s-backend
  labels:
    app: login-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: login-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: login-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - login-app
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "DoNotSchedule"
          labelSelector:
            matchLabels:
              app: login-app
      containers:
        - image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-login:latest
          name: k8s-tomlogin
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /login.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /login.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - name: pv-k8slogin
              mountPath: /data/login
      volumes:
        - name: pv-k8slogin
          persistentVolumeClaim:
            claimName: pvc-k8slogin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-prd-tomorder
  namespace: k8s-backend
  labels:
    app: order-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: order-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - order-app
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "ScheduleAnyway"
          labelSelector:
            matchLabels:
              app: order-app
      containers:
        - image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-order:latest
          name: k8s-tomorder
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /order.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /order.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - name: pv-k8sorder
              mountPath: /data/order
      volumes:
        - name: pv-k8sorder
          persistentVolumeClaim:
            claimName: pvc-k8sorder

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-prd-tomreservation
  namespace: k8s-backend
  labels:
    app: reservation-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reservation-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: reservation-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - reservation-app
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "ScheduleAnyway"
          labelSelector:
            matchLabels:
              app: reservation-app
      containers:
        - image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-reservation:latest
          name: k8s-tomreservation
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /reservation.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /reservation.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - name: pv-k8sreservation
              mountPath: /data/reservation
      volumes:
        - name: pv-k8sreservation
          persistentVolumeClaim:
            claimName: pvc-k8sreservation
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-prd-tomreservationinfo
  namespace: k8s-backend
  labels:
    app: reservationinfo-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reservationinfo-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: reservationinfo-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - reservationinfo-app
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: "ScheduleAnyway"
          labelSelector:
            matchLabels:
              app: reservationinfo-app
      containers:
        - image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-reservationinfo:latest
          name: k8s-tomreservationinfo
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: 256Mi
              cpu: 200m
            limits:
              memory: 256Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /reservation_info.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /reservation_info.jsp
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - name: pv-k8sreservationinfo
              mountPath: /data/reservationinfo
      volumes:
        - name: pv-k8sreservationinfo
          persistentVolumeClaim:
            claimName: pvc-k8sreservationinfo
